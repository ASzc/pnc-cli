# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from pprint import pformat
from six import iteritems


class BuildEnvironmentRest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        BuildEnvironmentRest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'description': 'str',
            'system_image_repository_url': 'str',
            'attributes': 'dict(str, str)',
            'build_type': 'str',
            'image_repository_url': 'str',
            'image_id': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'system_image_repository_url': 'systemImageRepositoryUrl',
            'attributes': 'attributes',
            'build_type': 'buildType',
            'image_repository_url': 'imageRepositoryUrl',
            'image_id': 'imageId'
        }

        self._id = None
        self._name = None
        self._description = None
        self._system_image_repository_url = None
        self._attributes = None
        self._build_type = None
        self._image_repository_url = None
        self._image_id = None

    @property
    def id(self):
        """
        Gets the id of this BuildEnvironmentRest.


        :return: The id of this BuildEnvironmentRest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BuildEnvironmentRest.


        :param id: The id of this BuildEnvironmentRest.
        :type: int
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this BuildEnvironmentRest.


        :return: The name of this BuildEnvironmentRest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this BuildEnvironmentRest.


        :param name: The name of this BuildEnvironmentRest.
        :type: str
        """
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this BuildEnvironmentRest.


        :return: The description of this BuildEnvironmentRest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this BuildEnvironmentRest.


        :param description: The description of this BuildEnvironmentRest.
        :type: str
        """
        self._description = description

    @property
    def system_image_repository_url(self):
        """
        Gets the system_image_repository_url of this BuildEnvironmentRest.


        :return: The system_image_repository_url of this BuildEnvironmentRest.
        :rtype: str
        """
        return self._system_image_repository_url

    @system_image_repository_url.setter
    def system_image_repository_url(self, system_image_repository_url):
        """
        Sets the system_image_repository_url of this BuildEnvironmentRest.


        :param system_image_repository_url: The system_image_repository_url of this BuildEnvironmentRest.
        :type: str
        """
        self._system_image_repository_url = system_image_repository_url

    @property
    def attributes(self):
        """
        Gets the attributes of this BuildEnvironmentRest.


        :return: The attributes of this BuildEnvironmentRest.
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this BuildEnvironmentRest.


        :param attributes: The attributes of this BuildEnvironmentRest.
        :type: dict(str, str)
        """
        self._attributes = attributes

    @property
    def build_type(self):
        """
        Gets the build_type of this BuildEnvironmentRest.


        :return: The build_type of this BuildEnvironmentRest.
        :rtype: str
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """
        Sets the build_type of this BuildEnvironmentRest.


        :param build_type: The build_type of this BuildEnvironmentRest.
        :type: str
        """
        allowed_values = ["JAVA", "DOCKER", "NATIVE"]
        if build_type not in allowed_values:
            raise ValueError(
                "Invalid value for `build_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._build_type = build_type

    @property
    def image_repository_url(self):
        """
        Gets the image_repository_url of this BuildEnvironmentRest.


        :return: The image_repository_url of this BuildEnvironmentRest.
        :rtype: str
        """
        return self._image_repository_url

    @image_repository_url.setter
    def image_repository_url(self, image_repository_url):
        """
        Sets the image_repository_url of this BuildEnvironmentRest.


        :param image_repository_url: The image_repository_url of this BuildEnvironmentRest.
        :type: str
        """
        self._image_repository_url = image_repository_url

    @property
    def image_id(self):
        """
        Gets the image_id of this BuildEnvironmentRest.


        :return: The image_id of this BuildEnvironmentRest.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """
        Sets the image_id of this BuildEnvironmentRest.


        :param image_id: The image_id of this BuildEnvironmentRest.
        :type: str
        """
        self._image_id = image_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
	    elif isinstance(value, datetime):
		result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
