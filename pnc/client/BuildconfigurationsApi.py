#!/usr/bin/env python
"""
BuildconfigurationsApi.py
Copyright 2015 Reverb Technologies, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os
import urllib

from models import *


class BuildconfigurationsApi(object):

    def __init__(self, api_client):
      self.api_client = api_client

    
    def getAll(self, **kwargs):
        """Gets all Build Configurations

        Args:
            
            pageIndex, int: Page index (required)
            
            pageSize, int: Pagination size (required)
            
            sort, str: Sorting RSQL (required)
            
            q, str: RSQL query (required)
            
        Returns: 
        """

        all_params = ['pageIndex', 'pageSize', 'sort', 'q']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method getAll" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'GET'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        
        if 'pageIndex' in params:
            query_params['pageIndex'] = self.api_client.to_path_value(params['pageIndex'])
        
        if 'pageSize' in params:
            query_params['pageSize'] = self.api_client.to_path_value(params['pageSize'])
        
        if 'sort' in params:
            query_params['sort'] = self.api_client.to_path_value(params['sort'])
        
        if 'q' in params:
            query_params['q'] = self.api_client.to_path_value(params['q'])
        

        

        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def createNew(self, **kwargs):
        """Creates a new Build Configuration

        Args:
            
            body, Configuration:  (required)
            
        Returns: 
        """

        all_params = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method createNew" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'POST'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        

        

        
        if 'body' in params:
            body_param = params['body']
        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def getAllByProductId(self, **kwargs):
        """Gets all Build Configurations of a Product

        Args:
            
            pageIndex, int: Page index (required)
            
            pageSize, int: Pagination size (required)
            
            sort, str: Sorting RSQL (required)
            
            q, str: RSQL query (required)
            
            productId, int: Product id (required)
            
        Returns: 
        """

        all_params = ['pageIndex', 'pageSize', 'sort', 'q', 'productId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method getAllByProductId" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/products/{productId}'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'GET'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        
        if 'pageIndex' in params:
            query_params['pageIndex'] = self.api_client.to_path_value(params['pageIndex'])
        
        if 'pageSize' in params:
            query_params['pageSize'] = self.api_client.to_path_value(params['pageSize'])
        
        if 'sort' in params:
            query_params['sort'] = self.api_client.to_path_value(params['sort'])
        
        if 'q' in params:
            query_params['q'] = self.api_client.to_path_value(params['q'])
        

        

        
        if 'productId' in params:
            replacement = str(self.api_client.to_path_value(params['productId']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'productId' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def getAllByProductId(self, **kwargs):
        """Gets all Build Configurations of the Specified Product Version

        Args:
            
            pageIndex, int: Page index (required)
            
            pageSize, int: Pagination size (required)
            
            sort, str: Sorting RSQL (required)
            
            q, str: RSQL query (required)
            
            productId, int: Product id (required)
            
            versionId, int: Product Version id (required)
            
        Returns: 
        """

        all_params = ['pageIndex', 'pageSize', 'sort', 'q', 'productId', 'versionId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method getAllByProductId" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/products/{productId}/product-versions/{versionId}'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'GET'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        
        if 'pageIndex' in params:
            query_params['pageIndex'] = self.api_client.to_path_value(params['pageIndex'])
        
        if 'pageSize' in params:
            query_params['pageSize'] = self.api_client.to_path_value(params['pageSize'])
        
        if 'sort' in params:
            query_params['sort'] = self.api_client.to_path_value(params['sort'])
        
        if 'q' in params:
            query_params['q'] = self.api_client.to_path_value(params['q'])
        

        

        
        if 'productId' in params:
            replacement = str(self.api_client.to_path_value(params['productId']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'productId' + '}',
                                                replacement)
        
        if 'versionId' in params:
            replacement = str(self.api_client.to_path_value(params['versionId']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'versionId' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def getAllByProjectId(self, **kwargs):
        """Gets all Build Configurations of a Project

        Args:
            
            pageIndex, int: Page index (required)
            
            pageSize, int: Pagination size (required)
            
            sort, str: Sorting RSQL (required)
            
            q, str: RSQL query (required)
            
            projectId, int: Project id (required)
            
        Returns: 
        """

        all_params = ['pageIndex', 'pageSize', 'sort', 'q', 'projectId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method getAllByProjectId" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/projects/{projectId}'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'GET'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        
        if 'pageIndex' in params:
            query_params['pageIndex'] = self.api_client.to_path_value(params['pageIndex'])
        
        if 'pageSize' in params:
            query_params['pageSize'] = self.api_client.to_path_value(params['pageSize'])
        
        if 'sort' in params:
            query_params['sort'] = self.api_client.to_path_value(params['sort'])
        
        if 'q' in params:
            query_params['q'] = self.api_client.to_path_value(params['q'])
        

        

        
        if 'projectId' in params:
            replacement = str(self.api_client.to_path_value(params['projectId']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'projectId' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def getSpecific(self, **kwargs):
        """Gets a specific Build Configuration

        Args:
            
            id, int: Build Configuration id (required)
            
        Returns: 
        """

        all_params = ['id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method getSpecific" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'GET'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def update(self, **kwargs):
        """Updates an existing Build Configuration

        Args:
            
            id, int: Build Configuration id (required)
            
            body, Configuration:  (required)
            
        Returns: 
        """

        all_params = ['id', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method update" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'PUT'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        

        

        
        if 'body' in params:
            body_param = params['body']
        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def deleteSpecific(self, **kwargs):
        """Removes a specific Build Configuration

        Args:
            
            id, int: Build Configuration id (required)
            
        Returns: 
        """

        all_params = ['id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteSpecific" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'DELETE'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def getAllDependencies(self, **kwargs):
        """Get the full list of both direct and indirect dependencies of the specified configuration

        Args:
            
            id, int: Build configuration id (required)
            
        Returns: 
        """

        all_params = ['id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method getAllDependencies" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}/all-dependencies'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'GET'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def trigger(self, **kwargs):
        """Triggers the build of a specific Build Configuration

        Args:
            
            id, int: Build Configuration id (required)
            
            callbackUrl, str: Optional Callback URL (required)
            
        Returns: 
        """

        all_params = ['id', 'callbackUrl']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method trigger" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}/build'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'POST'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        
        if 'callbackUrl' in params:
            query_params['callbackUrl'] = self.api_client.to_path_value(params['callbackUrl'])
        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def getBuildRecords(self, **kwargs):
        """Get all build record associated with this build configuration, returns empty list if no build records are found

        Args:
            
            pageIndex, int: Page index (required)
            
            pageSize, int: Pagination size (required)
            
            sort, str: Sorting RSQL (required)
            
            q, str: RSQL query (required)
            
            id, int: Build configuration id (required)
            
        Returns: 
        """

        all_params = ['pageIndex', 'pageSize', 'sort', 'q', 'id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method getBuildRecords" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}/build-records'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'GET'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        
        if 'pageIndex' in params:
            query_params['pageIndex'] = self.api_client.to_path_value(params['pageIndex'])
        
        if 'pageSize' in params:
            query_params['pageSize'] = self.api_client.to_path_value(params['pageSize'])
        
        if 'sort' in params:
            query_params['sort'] = self.api_client.to_path_value(params['sort'])
        
        if 'q' in params:
            query_params['q'] = self.api_client.to_path_value(params['q'])
        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def getLatestBuildRecord(self, **kwargs):
        """Get latest build record associated with this build configuration, returns no content if no build records are found

        Args:
            
            id, int: Build configuration id (required)
            
        Returns: 
        """

        all_params = ['id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method getLatestBuildRecord" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}/build-records/latest'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'GET'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def clone(self, **kwargs):
        """Clones an existing Build Configuration

        Args:
            
            id, int: Build Configuration id (required)
            
        Returns: 
        """

        all_params = ['id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method clone" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}/clone'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'POST'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def getDependencies(self, **kwargs):
        """Get the direct dependencies of the specified configuration

        Args:
            
            id, int: Build configuration id (required)
            
        Returns: 
        """

        all_params = ['id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method getDependencies" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}/dependencies'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'GET'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def addDependency(self, **kwargs):
        """Adds a dependency to the specified config

        Args:
            
            id, int: Build Configuration id (required)
            
            body, Configuration:  (required)
            
        Returns: 
        """

        all_params = ['id', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method addDependency" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}/dependencies'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'POST'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        

        

        
        if 'body' in params:
            body_param = params['body']
        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def removeDependency(self, **kwargs):
        """Removes a configuration from the specified config set

        Args:
            
            id, int: Build configuration set id (required)
            
            dependencyId, int: Build configuration id (required)
            
        Returns: 
        """

        all_params = ['id', 'dependencyId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method removeDependency" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}/dependencies/{dependencyId}'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'DELETE'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        
        if 'dependencyId' in params:
            replacement = str(self.api_client.to_path_value(params['dependencyId']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'dependencyId' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def getProductVersions(self, **kwargs):
        """Get associated Product Versions of the specified Configuration

        Args:
            
            id, int: Build configuration id (required)
            
        Returns: 
        """

        all_params = ['id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method getProductVersions" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}/product-versions'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'GET'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def addProductVersion(self, **kwargs):
        """Associates a product version to the specified config

        Args:
            
            id, int: Build Configuration id (required)
            
            body, ProductVersion:  (required)
            
        Returns: 
        """

        all_params = ['id', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method addProductVersion" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}/product-versions'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'POST'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        

        

        
        if 'body' in params:
            body_param = params['body']
        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def removeProductVersion(self, **kwargs):
        """Removes a product version from the specified config set

        Args:
            
            id, int: Build configuration set id (required)
            
            productVersionId, int: Product version id (required)
            
        Returns: 
        """

        all_params = ['id', 'productVersionId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method removeProductVersion" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}/product-versions/{productVersionId}'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'DELETE'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        
        if 'productVersionId' in params:
            replacement = str(self.api_client.to_path_value(params['productVersionId']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'productVersionId' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def getRevisions(self, **kwargs):
        """Gets audited revisions of this build configuration

        Args:
            
            id, int: Build configuration id (required)
            
        Returns: 
        """

        all_params = ['id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method getRevisions" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}/revisions'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'GET'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
    def getRevision(self, **kwargs):
        """Get specific audited revision of this build configuration

        Args:
            
            id, int: Build configuration id (required)
            
            rev, int: Build configuration rev (required)
            
        Returns: 
        """

        all_params = ['id', 'rev']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method getRevision" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/build-configurations/{id}/revisions/{rev}'
        resource_path = resource_path.replace('{format}', 'json')
        method = 'GET'

        query_params = {}
        header_params = {}
        form_params = {}
        files = {}
        body_param = None

        

        

        
        if 'id' in params:
            replacement = str(self.api_client.to_path_value(params['id']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'id' + '}',
                                                replacement)
        
        if 'rev' in params:
            replacement = str(self.api_client.to_path_value(params['rev']))
            replacement = urllib.quote(replacement)
            resource_path = resource_path.replace('{' + 'rev' + '}',
                                                replacement)
        

        

        

        post_data = (form_params if form_params else body_param)

        response = self.api_client.callAPI(resource_path, method, query_params,
                                          post_data, header_params, files=files)
        return response

   
