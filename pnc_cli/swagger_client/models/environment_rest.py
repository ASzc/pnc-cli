# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class EnvironmentRest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EnvironmentRest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'build_type': 'str',
            'operational_system': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'build_type': 'buildType',
            'operational_system': 'operationalSystem'
        }

        self._id = None
        self._build_type = None
        self._operational_system = None

    @property
    def id(self):
        """
        Gets the id of this EnvironmentRest.


        :return: The id of this EnvironmentRest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EnvironmentRest.


        :param id: The id of this EnvironmentRest.
        :type: int
        """
        self._id = id

    @property
    def build_type(self):
        """
        Gets the build_type of this EnvironmentRest.


        :return: The build_type of this EnvironmentRest.
        :rtype: str
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """
        Sets the build_type of this EnvironmentRest.


        :param build_type: The build_type of this EnvironmentRest.
        :type: str
        """
        self._build_type = build_type

    @property
    def operational_system(self):
        """
        Gets the operational_system of this EnvironmentRest.


        :return: The operational_system of this EnvironmentRest.
        :rtype: str
        """
        return self._operational_system

    @operational_system.setter
    def operational_system(self, operational_system):
        """
        Sets the operational_system of this EnvironmentRest.


        :param operational_system: The operational_system of this EnvironmentRest.
        :type: str
        """
        self._operational_system = operational_system

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
