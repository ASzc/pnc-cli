# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from pprint import pformat
from six import iteritems


class BuildRecordSet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        BuildRecordSet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'description': 'str',
            'performed_in_product_milestone': 'ProductMilestone',
            'distributed_in_product_milestone': 'ProductMilestone',
            'build_set_content_id': 'str',
            'build_records': 'list[BuildRecord]'
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description',
            'performed_in_product_milestone': 'performedInProductMilestone',
            'distributed_in_product_milestone': 'distributedInProductMilestone',
            'build_set_content_id': 'buildSetContentId',
            'build_records': 'buildRecords'
        }

        self._id = None
        self._description = None
        self._performed_in_product_milestone = None
        self._distributed_in_product_milestone = None
        self._build_set_content_id = None
        self._build_records = None

    @property
    def id(self):
        """
        Gets the id of this BuildRecordSet.


        :return: The id of this BuildRecordSet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BuildRecordSet.


        :param id: The id of this BuildRecordSet.
        :type: int
        """
        self._id = id

    @property
    def description(self):
        """
        Gets the description of this BuildRecordSet.


        :return: The description of this BuildRecordSet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this BuildRecordSet.


        :param description: The description of this BuildRecordSet.
        :type: str
        """
        self._description = description

    @property
    def performed_in_product_milestone(self):
        """
        Gets the performed_in_product_milestone of this BuildRecordSet.


        :return: The performed_in_product_milestone of this BuildRecordSet.
        :rtype: ProductMilestone
        """
        return self._performed_in_product_milestone

    @performed_in_product_milestone.setter
    def performed_in_product_milestone(self, performed_in_product_milestone):
        """
        Sets the performed_in_product_milestone of this BuildRecordSet.


        :param performed_in_product_milestone: The performed_in_product_milestone of this BuildRecordSet.
        :type: ProductMilestone
        """
        self._performed_in_product_milestone = performed_in_product_milestone

    @property
    def distributed_in_product_milestone(self):
        """
        Gets the distributed_in_product_milestone of this BuildRecordSet.


        :return: The distributed_in_product_milestone of this BuildRecordSet.
        :rtype: ProductMilestone
        """
        return self._distributed_in_product_milestone

    @distributed_in_product_milestone.setter
    def distributed_in_product_milestone(self, distributed_in_product_milestone):
        """
        Sets the distributed_in_product_milestone of this BuildRecordSet.


        :param distributed_in_product_milestone: The distributed_in_product_milestone of this BuildRecordSet.
        :type: ProductMilestone
        """
        self._distributed_in_product_milestone = distributed_in_product_milestone

    @property
    def build_set_content_id(self):
        """
        Gets the build_set_content_id of this BuildRecordSet.


        :return: The build_set_content_id of this BuildRecordSet.
        :rtype: str
        """
        return self._build_set_content_id

    @build_set_content_id.setter
    def build_set_content_id(self, build_set_content_id):
        """
        Sets the build_set_content_id of this BuildRecordSet.


        :param build_set_content_id: The build_set_content_id of this BuildRecordSet.
        :type: str
        """
        self._build_set_content_id = build_set_content_id

    @property
    def build_records(self):
        """
        Gets the build_records of this BuildRecordSet.


        :return: The build_records of this BuildRecordSet.
        :rtype: list[BuildRecord]
        """
        return self._build_records

    @build_records.setter
    def build_records(self, build_records):
        """
        Sets the build_records of this BuildRecordSet.


        :param build_records: The build_records of this BuildRecordSet.
        :type: list[BuildRecord]
        """
        self._build_records = build_records

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, datetime):
                result[attr] = str(value)
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
